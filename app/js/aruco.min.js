"use strict";var AR=AR||{};AR.Marker=function(id,corners){this.id=id,this.corners=corners},AR.Detector=function(){this.grey=new CV.Image,this.thres=new CV.Image,this.homography=new CV.Image,this.binary=[],this.contours=[],this.polys=[],this.candidates=[]},AR.Detector.prototype.detect=function(image){return CV.grayscale(image,this.grey),CV.adaptiveThreshold(this.grey,this.thres,2,7),this.contours=CV.findContours(this.thres,this.binary),this.candidates=this.findCandidates(this.contours,2*typeCode,.05,10),this.candidates=this.clockwiseCorners(this.candidates),this.candidates=this.notTooNear(this.candidates,10),this.findMarkers(this.grey,this.candidates,49)},AR.Detector.prototype.findCandidates=function(contours,minSize,epsilon,minLength){var candidates=[],len=contours.length,contour,poly,i;for(this.polys=[],i=0;i<len;++i)(contour=contours[i]).length>=minSize&&(poly=CV.approxPolyDP(contour,contour.length*epsilon),this.polys.push(poly),4===poly.length&&CV.isContourConvex(poly)&&CV.minEdgeLength(poly)>=minLength&&candidates.push(poly));return candidates},AR.Detector.prototype.clockwiseCorners=function(candidates){var len=candidates.length,dx1,dx2,dy1,dy2,swap,i;for(i=0;i<len;++i)dx1=candidates[i][1].x-candidates[i][0].x,dy1=candidates[i][1].y-candidates[i][0].y,dx2=candidates[i][2].x-candidates[i][0].x,dx1*(dy2=candidates[i][2].y-candidates[i][0].y)-dy1*dx2<0&&(swap=candidates[i][1],candidates[i][1]=candidates[i][3],candidates[i][3]=swap);return candidates},AR.Detector.prototype.notTooNear=function(candidates,minDist){var notTooNear=[],len=candidates.length,dist,dx,dy,i,j,k;for(i=0;i<len;++i)for(j=i+1;j<len;++j){for(dist=0,k=0;k<4;++k)dist+=(dx=candidates[i][k].x-candidates[j][k].x)*dx+(dy=candidates[i][k].y-candidates[j][k].y)*dy;dist/4<minDist*minDist&&(CV.perimeter(candidates[i])<CV.perimeter(candidates[j])?candidates[i].tooNear=!0:candidates[j].tooNear=!0)}for(i=0;i<len;++i)candidates[i].tooNear||notTooNear.push(candidates[i]);return notTooNear},AR.Detector.prototype.findMarkers=function(imageSrc,candidates,warpSize){var markers=[],len=candidates.length,candidate,marker,i;for(i=0;i<len;++i)candidate=candidates[i],CV.warp(imageSrc,this.homography,candidate,warpSize),CV.threshold(this.homography,this.homography,CV.otsu(this.homography)),(marker=this.getMarker(this.homography,candidate))&&markers.push(marker);return markers},AR.Detector.prototype.getMarker=function(imageSrc,candidate){var lmarker=typeCode+2,lastBit=typeCode+1,width=imageSrc.width/lmarker>>>0,minZero=width*width>>1,bits=[],rotations=[],distances=[],square,pair,inc,i,j;for(i=0;i<lmarker;++i)for(inc=0===i||lastBit===i?1:lastBit,j=0;j<7;j+=inc)if(square={x:j*width,y:i*width,width:width,height:width},CV.countNonZero(imageSrc,square)>minZero)return null;for(i=0;i<typeCode;++i)for(bits[i]=[],j=0;j<typeCode;++j)square={x:(j+1)*width,y:(i+1)*width,width:width,height:width},bits[i][j]=CV.countNonZero(imageSrc,square)>minZero?1:0;for(rotations[0]=bits,distances[0]=this.hammingDistance(rotations[0]),pair={first:distances[0],second:0},i=1;i<4;++i)rotations[i]=this.rotate(rotations[i-1]),distances[i]=this.hammingDistance(rotations[i]),distances[i]<pair.first&&(pair.first=distances[i],pair.second=i);return 0!==pair.first?null:new AR.Marker(this.mat2id(rotations[pair.second]),this.rotate2(candidate,4-pair.second))},AR.Detector.prototype.hammingDistance=function(bits){var theIds,dist=0,sum,minSum,i,j,k,ids={5:[[1,0,0,0,0],[1,0,1,1,1],[0,1,0,0,1],[0,1,1,1,0]],4:[[0,0,1,0],[0,0,1,1],[1,1,1,0],[1,0,1,1]],3:[[0,1,0],[0,0,1],[1,1,0],[1,1,1]]}[typeCode];for(i=0;i<typeCode;++i){for(minSum=1/0,j=0;j<4;++j){for(sum=0,k=0;k<typeCode;++k)sum+=bits[i][k]===ids[j][k]?0:1;sum<minSum&&(minSum=sum)}dist+=minSum}return dist},AR.Detector.prototype.mat2id=function(bits){var id=0,i,c,bitsIds={5:[1,3],4:[0,3],3:[0,2]}[typeCode];for(i=0;i<typeCode;++i)id<<=1,id|=bits[i][bitsIds[0]],id<<=1,id|=bits[i][bitsIds[1]];return id},AR.Detector.prototype.rotate=function(src){var dst=[],len=src.length,i,j;for(i=0;i<len;++i)for(dst[i]=[],j=0;j<src[i].length;++j)dst[i][j]=src[src[i].length-j-1][i];return dst},AR.Detector.prototype.rotate2=function(src,rotation){var dst=[],len=src.length,i;for(i=0;i<len;++i)dst[i]=src[(rotation+i)%len];return dst};